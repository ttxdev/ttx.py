# coding: utf-8

"""
    TTX.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from ttx.models.creator_rarity_dto import CreatorRarityDto
from ttx.models.model_id import ModelId
from ttx.models.player_partial_dto import PlayerPartialDto
from typing import Optional, Set
from typing_extensions import Self

class LootBoxResultDto(BaseModel):
    """
    LootBoxResultDto
    """ # noqa: E501
    lootbox_id: ModelId
    player: PlayerPartialDto
    result: CreatorRarityDto
    rarities: List[CreatorRarityDto]
    __properties: ClassVar[List[str]] = ["lootbox_id", "player", "result", "rarities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LootBoxResultDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lootbox_id
        if self.lootbox_id:
            _dict['lootbox_id'] = self.lootbox_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rarities (list)
        _items = []
        if self.rarities:
            for _item_rarities in self.rarities:
                if _item_rarities:
                    _items.append(_item_rarities.to_dict())
            _dict['rarities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LootBoxResultDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lootbox_id": ModelId.from_dict(obj["lootbox_id"]) if obj.get("lootbox_id") is not None else None,
            "player": PlayerPartialDto.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "result": CreatorRarityDto.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "rarities": [CreatorRarityDto.from_dict(_item) for _item in obj["rarities"]] if obj.get("rarities") is not None else None
        })
        return _obj


