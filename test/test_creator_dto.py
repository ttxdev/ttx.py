# coding: utf-8

"""
    TTX.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ttx_py.models.creator_dto import CreatorDto

class TestCreatorDto(unittest.TestCase):
    """CreatorDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreatorDto:
        """Test CreatorDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreatorDto`
        """
        model = CreatorDto()
        if include_optional:
            return CreatorDto(
                id = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                slug = '',
                twitch_id = '',
                url = '',
                avatar_url = '',
                ticker = '',
                value = 56,
                stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                    is_live = True, 
                    started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                history = [
                    ttx_py.models.vote_dto.VoteDto(
                        creator_id = 56, 
                        value = 56, 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                transactions = [
                    ttx_py.models.creator_transaction_dto.CreatorTransactionDto(
                        id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        quantity = 56, 
                        value = 56, 
                        action = 'Buy', 
                        creator_id = 56, 
                        player_id = 56, 
                        player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                            id = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            slug = '', 
                            twitch_id = '', 
                            url = '', 
                            avatar_url = '', 
                            credits = 56, 
                            portfolio = 56, 
                            value = 56, 
                            type = 'User', ), )
                    ],
                shares = [
                    ttx_py.models.creator_share_dto.CreatorShareDto(
                        player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                            id = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            slug = '', 
                            twitch_id = '', 
                            url = '', 
                            avatar_url = '', 
                            credits = 56, 
                            portfolio = 56, 
                            value = 56, 
                            type = 'User', ), 
                        quantity = 56, )
                    ]
            )
        else:
            return CreatorDto(
                id = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                slug = '',
                twitch_id = '',
                url = '',
                avatar_url = '',
                ticker = '',
                value = 56,
                stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                    is_live = True, 
                    started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                history = [
                    ttx_py.models.vote_dto.VoteDto(
                        creator_id = 56, 
                        value = 56, 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                transactions = [
                    ttx_py.models.creator_transaction_dto.CreatorTransactionDto(
                        id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        quantity = 56, 
                        value = 56, 
                        action = 'Buy', 
                        creator_id = 56, 
                        player_id = 56, 
                        player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                            id = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            slug = '', 
                            twitch_id = '', 
                            url = '', 
                            avatar_url = '', 
                            credits = 56, 
                            portfolio = 56, 
                            value = 56, 
                            type = 'User', ), )
                    ],
                shares = [
                    ttx_py.models.creator_share_dto.CreatorShareDto(
                        player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                            id = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            slug = '', 
                            twitch_id = '', 
                            url = '', 
                            avatar_url = '', 
                            credits = 56, 
                            portfolio = 56, 
                            value = 56, 
                            type = 'User', ), 
                        quantity = 56, )
                    ],
        )
        """

    def testCreatorDto(self):
        """Test CreatorDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
