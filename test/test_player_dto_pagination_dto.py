# coding: utf-8

"""
    TTX.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ttx_py.models.player_dto_pagination_dto import PlayerDtoPaginationDto

class TestPlayerDtoPaginationDto(unittest.TestCase):
    """PlayerDtoPaginationDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlayerDtoPaginationDto:
        """Test PlayerDtoPaginationDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlayerDtoPaginationDto`
        """
        model = PlayerDtoPaginationDto()
        if include_optional:
            return PlayerDtoPaginationDto(
                data = [
                    ttx_py.models.player_dto.PlayerDto(
                        id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        slug = '', 
                        twitch_id = '', 
                        url = '', 
                        avatar_url = '', 
                        credits = 56, 
                        portfolio = 56, 
                        value = 56, 
                        type = 'User', 
                        transactions = [
                            ttx_py.models.player_transaction_dto.PlayerTransactionDto(
                                id = 56, 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                quantity = 56, 
                                value = 56, 
                                action = 'Buy', 
                                creator_id = 56, 
                                player_id = 56, 
                                creator = ttx_py.models.creator_partial_dto.CreatorPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    ticker = '', 
                                    value = 56, 
                                    stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                                        is_live = True, 
                                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    history = [
                                        ttx_py.models.vote_dto.VoteDto(
                                            creator_id = 56, 
                                            value = 56, 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], ), )
                            ], 
                        loot_boxes = [
                            ttx_py.models.loot_box_dto.LootBoxDto(
                                id = 56, 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                is_open = True, 
                                result = ttx_py.models.creator_partial_dto.CreatorPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    ticker = '', 
                                    value = 56, 
                                    stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                                        is_live = True, 
                                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    history = [
                                        ttx_py.models.vote_dto.VoteDto(
                                            creator_id = 56, 
                                            value = 56, 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], ), 
                                player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    credits = 56, 
                                    portfolio = 56, 
                                    value = 56, 
                                    type = 'User', ), )
                            ], 
                        shares = [
                            ttx_py.models.player_share_dto.PlayerShareDto(
                                creator = , 
                                quantity = 56, )
                            ], 
                        history = [
                            ttx_py.models.portfolio_snapshot_dto.PortfolioSnapshotDto(
                                player_id = 56, 
                                value = 56, 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                total = 56
            )
        else:
            return PlayerDtoPaginationDto(
                data = [
                    ttx_py.models.player_dto.PlayerDto(
                        id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        slug = '', 
                        twitch_id = '', 
                        url = '', 
                        avatar_url = '', 
                        credits = 56, 
                        portfolio = 56, 
                        value = 56, 
                        type = 'User', 
                        transactions = [
                            ttx_py.models.player_transaction_dto.PlayerTransactionDto(
                                id = 56, 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                quantity = 56, 
                                value = 56, 
                                action = 'Buy', 
                                creator_id = 56, 
                                player_id = 56, 
                                creator = ttx_py.models.creator_partial_dto.CreatorPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    ticker = '', 
                                    value = 56, 
                                    stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                                        is_live = True, 
                                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    history = [
                                        ttx_py.models.vote_dto.VoteDto(
                                            creator_id = 56, 
                                            value = 56, 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], ), )
                            ], 
                        loot_boxes = [
                            ttx_py.models.loot_box_dto.LootBoxDto(
                                id = 56, 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                is_open = True, 
                                result = ttx_py.models.creator_partial_dto.CreatorPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    ticker = '', 
                                    value = 56, 
                                    stream_status = ttx_py.models.stream_status_dto.StreamStatusDto(
                                        is_live = True, 
                                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    history = [
                                        ttx_py.models.vote_dto.VoteDto(
                                            creator_id = 56, 
                                            value = 56, 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], ), 
                                player = ttx_py.models.player_partial_dto.PlayerPartialDto(
                                    id = 56, 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    name = '', 
                                    slug = '', 
                                    twitch_id = '', 
                                    url = '', 
                                    avatar_url = '', 
                                    credits = 56, 
                                    portfolio = 56, 
                                    value = 56, 
                                    type = 'User', ), )
                            ], 
                        shares = [
                            ttx_py.models.player_share_dto.PlayerShareDto(
                                creator = , 
                                quantity = 56, )
                            ], 
                        history = [
                            ttx_py.models.portfolio_snapshot_dto.PortfolioSnapshotDto(
                                player_id = 56, 
                                value = 56, 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                total = 56,
        )
        """

    def testPlayerDtoPaginationDto(self):
        """Test PlayerDtoPaginationDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
